{"version":3,"sources":["webpack:///./node_modules/angular-2-dropdown-multiselect/esm5/angular-2-dropdown-multiselect.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC0K;AACtH;AACtD;AACY;AACI;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC,+BAA+B,WAAW;AAC1C,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iCAAiC;AAClF,6CAA6C,yCAAyC,qCAAqC,EAAE,EAAE;AAC/H,2CAA2C,wCAAwC,sCAAsC,EAAE,EAAE;AAC7H,uCAAuC,yBAAyB,WAAW;AAC3E,oDAAoD,gCAAgC,EAAE,gBAAgB;AACtG,cAAc,sCAAsC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,kDAAI;AAChB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB;AACA,iDAAiD;AACjD,KAAK,OAAO,wDAAU,gBAAgB,OAAO,kDAAI,EAAE,IAAI;AACvD,EAAE;AACF;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC;AACA;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU,cAAc,qCAAqC,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAY;AACrD,kCAAkC,0DAAY;AAC9C,kCAAkC,0DAAY;AAC9C,2BAA2B,0DAAY;AACvC,6BAA6B,0DAAY;AACzC,8BAA8B,0DAAY;AAC1C;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,6CAA6C,gEAAS;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAA4C,EAAE;AACzF,wCAAwC,wBAAwB,EAAE;AAClE;AACA;AACA;AACA;AACA,uHAAuH,iBAAiB,EAAE;AAC1I;AACA;AACA;AACA;AACA,6FAA6F,sDAAsD,EAAE;AACrJ,+EAA+E,iBAAiB,EAAE;AAClG;AACA;AACA;AACA;AACA,gFAAgF,wEAAwE,EAAE;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iDAAiD,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,sBAAsB,EAAE;AACvF,0HAA0H,sBAAsB,EAAE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,qDAAqD,EAAE;AACvD,mDAAmD,4DAA4D,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,sBAAsB,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,qEAAqE,EAAE;AACrJ,6DAA6D,2CAA2C,EAAE;AAC1G;AACA;AACA;AACA;AACA,8EAA8E,0EAA0E,EAAE;AAC1J,2DAA2D,4BAA4B,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6CAA6C,sCAAsC,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA,wEAAwE,wBAAwB,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,wBAAwB,EAAE;AAC3G;AACA,gDAAgD,wCAAwC,EAAE;AAC1F,oDAAoD,yBAAyB,EAAE;AAC/E,iDAAiD,kCAAkC,EAAE;AACrF;AACA;AACA,yEAAyE,4CAA4C,EAAE;AACvH;AACA,gEAAgE,oBAAoB,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC,kBAAkB,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB,EAAE;AAClF,wEAAwE,8CAA8C,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yGAAyG,mDAAmD,EAAE;AAC9J;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,sTAAsT,SAAS,4HAA4H,0DAA0D,mVAAmV,cAAc,kBAAkB,21BAA21B,mMAAmM,sBAAsB,yHAAyH,2BAA2B,kBAAkB,wDAAwD,yMAAyM,sBAAsB,6HAA6H,2BAA2B,oBAAoB,iGAAiG,6FAA6F,mCAAmC,4BAA4B,uFAAuF,mCAAmC,2BAA2B,wDAAwD,gDAAgD,4ZAA4Z,+jBAA+jB,sMAAsM,sBAAsB,oTAAoT,WAAW,sBAAsB,4CAA4C,8BAA8B,aAAa,oDAAoD,+BAA+B,mGAAmG,aAAa,kGAAkG,aAAa,mBAAmB,gBAAgB,yIAAyI,wMAAwM,gDAAgD,0LAA0L,eAAe,8HAA8H,eAAe;AAC9oL,4BAA4B,oBAAoB,iBAAiB,qBAAqB,wBAAwB,gBAAgB,mBAAmB,qBAAqB,qBAAqB,eAAe,WAAW,cAAc,gBAAgB,cAAc,QAAQ,YAAY,aAAa,cAAc,oCAAoC,4BAA4B,mBAAmB,gBAAgB,UAAU,mBAAmB,iBAAiB,mBAAmB,sBAAsB,kBAAkB,kBAAkB;AAC9gB;AACA,iCAAiC,qEAAuB;AACxD,aAAa,IAAI;AACjB;AACA,2DAA2D;AAC3D,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,0DAAW,GAAG;AAC1B,KAAK,iCAAiC;AACtC,KAAK,OAAO,6DAAe,GAAG;AAC9B,KAAK,OAAO,+DAAiB,GAAG;AAChC,EAAE;AACF;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,+BAA+B,OAAO,oDAAM,EAAE;AAC9C,wBAAwB,OAAO,oDAAM,EAAE;AACvC,wBAAwB,OAAO,oDAAM,EAAE;AACvC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,mBAAmB,OAAO,oDAAM,EAAE;AAClC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,iBAAiB,OAAO,0DAAY,iDAAiD,GAAG,OAAO,0DAAY,sDAAsD;AACjK;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY,EAAE,kEAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;;AAEsH;AACtH","file":"app-pages-form-elements-form-elements-module~app-pages-membership-membership-module~app-pages-pages-~7190807b.js","sourcesContent":["import { __spread } from 'tslib';\nimport { Pipe, Directive, ElementRef, Host, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, HostListener, IterableDiffers, Output, NgModule } from '@angular/core';\nimport { FormBuilder, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\nvar MultiSelectSearchFilter = /** @class */ (function () {\n    function MultiSelectSearchFilter() {\n        this._searchCache = {};\n        this._searchCacheInclusive = {};\n        this._prevSkippedItems = {};\n    }\n    MultiSelectSearchFilter.prototype.transform = function (options, str, limit, renderLimit) {\n        if (str === void 0) { str = ''; }\n        if (limit === void 0) { limit = 0; }\n        if (renderLimit === void 0) { renderLimit = 0; }\n        str = str.toLowerCase();\n        if (options !== this._lastOptions) {\n            this._lastOptions = options;\n            this._searchCache = {};\n            this._searchCacheInclusive = {};\n            this._prevSkippedItems = {};\n        }\n        var filteredOpts = this._searchCache.hasOwnProperty(str)\n            ? this._searchCache[str]\n            : this._doSearch(options, str, limit);\n        var isUnderLimit = options.length <= limit;\n        return isUnderLimit\n            ? filteredOpts\n            : this._limitRenderedItems(filteredOpts, renderLimit);\n    };\n    MultiSelectSearchFilter.prototype._getSubsetOptions = function (options, prevOptions, prevSearchStr) {\n        var prevInclusiveOrIdx = this._searchCacheInclusive[prevSearchStr];\n        if (prevInclusiveOrIdx === true) {\n            return prevOptions;\n        }\n        else if (typeof prevInclusiveOrIdx === 'number') {\n            return __spread(prevOptions, options.slice(prevInclusiveOrIdx));\n        }\n        return options;\n    };\n    MultiSelectSearchFilter.prototype._doSearch = function (options, str, limit) {\n        var prevStr = str.slice(0, -1);\n        var prevResults = this._searchCache[prevStr];\n        var prevResultShift = this._prevSkippedItems[prevStr] || 0;\n        if (prevResults) {\n            options = this._getSubsetOptions(options, prevResults, prevStr);\n        }\n        var optsLength = options.length;\n        var maxFound = limit > 0 ? Math.min(limit, optsLength) : optsLength;\n        var regexp = new RegExp(this._escapeRegExp(str), 'i');\n        var filteredOpts = [];\n        var i = 0, founded = 0, removedFromPrevResult = 0;\n        var doesOptionMatch = function (option) { return regexp.test(option.name); };\n        var getChildren = function (option) { return options.filter(function (child) { return child.parentId === option.id; }); };\n        var getParent = function (option) { return options.find(function (parent) { return option.parentId === parent.id; }); };\n        var foundFn = function (item) { filteredOpts.push(item); founded++; };\n        var notFoundFn = prevResults ? function () { return removedFromPrevResult++; } : function () { };\n        for (; i < optsLength && founded < maxFound; ++i) {\n            var option = options[i];\n            var directMatch = doesOptionMatch(option);\n            if (directMatch) {\n                foundFn(option);\n                continue;\n            }\n            if (typeof option.parentId === 'undefined') {\n                var childrenMatch = getChildren(option).some(doesOptionMatch);\n                if (childrenMatch) {\n                    foundFn(option);\n                    continue;\n                }\n            }\n            if (typeof option.parentId !== 'undefined') {\n                var parentMatch = doesOptionMatch(getParent(option));\n                if (parentMatch) {\n                    foundFn(option);\n                    continue;\n                }\n            }\n            notFoundFn();\n        }\n        var totalIterations = i + prevResultShift;\n        this._searchCache[str] = filteredOpts;\n        this._searchCacheInclusive[str] = i === optsLength || totalIterations;\n        this._prevSkippedItems[str] = removedFromPrevResult + prevResultShift;\n        return filteredOpts;\n    };\n    MultiSelectSearchFilter.prototype._limitRenderedItems = function (items, limit) {\n        return items.length > limit && limit > 0 ? items.slice(0, limit) : items;\n    };\n    MultiSelectSearchFilter.prototype._escapeRegExp = function (str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    };\n    return MultiSelectSearchFilter;\n}());\nMultiSelectSearchFilter.decorators = [\n    { type: Pipe, args: [{\n                name: 'searchFilter'\n            },] },\n];\nvar AutofocusDirective = /** @class */ (function () {\n    function AutofocusDirective(elemRef) {\n        this.elemRef = elemRef;\n    }\n    Object.defineProperty(AutofocusDirective.prototype, \"element\", {\n        get: function () {\n            return this.elemRef.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutofocusDirective.prototype.ngOnInit = function () {\n        this.focus();\n    };\n    AutofocusDirective.prototype.ngOnChanges = function (changes) {\n        var ssAutofocusChange = changes[\"ssAutofocus\"];\n        if (ssAutofocusChange && !ssAutofocusChange.isFirstChange()) {\n            this.focus();\n        }\n    };\n    AutofocusDirective.prototype.focus = function () {\n        if (this.ssAutofocus) {\n            return;\n        }\n        this.element.focus && this.element.focus();\n    };\n    return AutofocusDirective;\n}());\nAutofocusDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[ssAutofocus]'\n            },] },\n];\nAutofocusDirective.ctorParameters = function () { return [\n    { type: ElementRef, decorators: [{ type: Host },] },\n]; };\nAutofocusDirective.propDecorators = {\n    \"ssAutofocus\": [{ type: Input },],\n};\nvar MULTISELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MultiselectDropdownComponent; }),\n    multi: true,\n};\nvar MultiselectDropdownComponent = /** @class */ (function () {\n    function MultiselectDropdownComponent(element, fb, searchFilter, differs, cdRef) {\n        this.element = element;\n        this.fb = fb;\n        this.searchFilter = searchFilter;\n        this.cdRef = cdRef;\n        this.filterControl = this.fb.control('');\n        this.disabled = false;\n        this.disabledSelection = false;\n        this.selectionLimitReached = new EventEmitter();\n        this.dropdownClosed = new EventEmitter();\n        this.dropdownOpened = new EventEmitter();\n        this.onAdded = new EventEmitter();\n        this.onRemoved = new EventEmitter();\n        this.onLazyLoad = new EventEmitter();\n        this.onFilter = this.filterControl.valueChanges;\n        this.destroyed$ = new Subject();\n        this.filteredOptions = [];\n        this.lazyLoadOptions = [];\n        this.renderFilteredOptions = [];\n        this.model = [];\n        this.prevModel = [];\n        this.numSelected = 0;\n        this.renderItems = true;\n        this.checkAllSearchRegister = new Set();\n        this.checkAllStatus = false;\n        this.loadedValueIds = [];\n        this._focusBack = false;\n        this.defaultSettings = {\n            closeOnClickOutside: true,\n            pullRight: false,\n            enableSearch: false,\n            searchRenderLimit: 0,\n            searchRenderAfter: 1,\n            searchMaxLimit: 0,\n            searchMaxRenderedItems: 0,\n            checkedStyle: 'checkboxes',\n            buttonClasses: 'btn btn-primary dropdown-toggle',\n            containerClasses: 'dropdown-inline',\n            selectionLimit: 0,\n            minSelectionLimit: 0,\n            closeOnSelect: false,\n            autoUnselect: false,\n            showCheckAll: false,\n            showUncheckAll: false,\n            fixedTitle: false,\n            dynamicTitleMaxItems: 3,\n            maxHeight: '300px',\n            isLazyLoad: false,\n            stopScrollPropagation: false,\n            loadViewDistance: 1,\n            selectAddedValues: false,\n            ignoreLabels: false,\n            maintainSelectionOrderInTitle: false,\n            focusBack: true\n        };\n        this.defaultTexts = {\n            checkAll: 'Check all',\n            uncheckAll: 'Uncheck all',\n            checked: 'checked',\n            checkedPlural: 'checked',\n            searchPlaceholder: 'Search...',\n            searchEmptyResult: 'Nothing found...',\n            searchNoRenderText: 'Type in search box to see results...',\n            defaultTitle: 'Select',\n            allSelected: 'All selected',\n        };\n        this._isVisible = false;\n        this._workerDocClicked = false;\n        this.onModelChange = function (_) { };\n        this.onModelTouched = function () { };\n        this.differ = differs.find([]).create(null);\n        this.settings = this.defaultSettings;\n        this.texts = this.defaultTexts;\n    }\n    Object.defineProperty(MultiselectDropdownComponent.prototype, \"focusBack\", {\n        get: function () {\n            return this.settings.focusBack && this._focusBack;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultiselectDropdownComponent.prototype.onClick = function (target) {\n        if (!this.isVisible || !this.settings.closeOnClickOutside) {\n            return;\n        }\n        var parentFound = false;\n        while (target != null && !parentFound) {\n            if (target === this.element.nativeElement) {\n                parentFound = true;\n            }\n            target = target.parentElement;\n        }\n        if (!parentFound) {\n            this.isVisible = false;\n            this._focusBack = true;\n            this.dropdownClosed.emit();\n        }\n    };\n    Object.defineProperty(MultiselectDropdownComponent.prototype, \"isVisible\", {\n        get: function () {\n            return this._isVisible;\n        },\n        set: function (val) {\n            this._isVisible = val;\n            this._workerDocClicked = val ? false : this._workerDocClicked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiselectDropdownComponent.prototype, \"searchLimit\", {\n        get: function () {\n            return this.settings.searchRenderLimit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiselectDropdownComponent.prototype, \"searchRenderAfter\", {\n        get: function () {\n            return this.settings.searchRenderAfter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MultiselectDropdownComponent.prototype, \"searchLimitApplied\", {\n        get: function () {\n            return this.searchLimit > 0 && this.options.length > this.searchLimit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MultiselectDropdownComponent.prototype.getItemStyle = function (option) {\n        if (!option.isLabel) {\n        }\n        if (option.disabled) {\n        }\n    };\n    MultiselectDropdownComponent.prototype.getItemStyleSelectionDisabled = function () {\n        if (this.disabledSelection) {\n            return { cursor: 'default' };\n        }\n    };\n    MultiselectDropdownComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.title = this.texts.defaultTitle || '';\n        this.filterControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe(function () {\n            _this.updateRenderItems();\n            if (_this.settings.isLazyLoad) {\n                _this.load();\n            }\n        });\n    };\n    MultiselectDropdownComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes['options']) {\n            this.options = this.options || [];\n            this.parents = this.options\n                .filter(function (option) { return typeof option.parentId === 'number'; })\n                .map(function (option) { return option.parentId; });\n            this.updateRenderItems();\n            if (this.settings.isLazyLoad &&\n                this.settings.selectAddedValues &&\n                this.loadedValueIds.length === 0) {\n                this.loadedValueIds = this.loadedValueIds.concat(changes[\"options\"].currentValue.map(function (value) { return value.id; }));\n            }\n            if (this.settings.isLazyLoad &&\n                this.settings.selectAddedValues &&\n                changes[\"options\"].previousValue) {\n                var addedValues_1 = changes[\"options\"].currentValue.filter(function (value) { return _this.loadedValueIds.indexOf(value.id) === -1; });\n                this.loadedValueIds.concat(addedValues_1.map(function (value) { return value.id; }));\n                if (this.checkAllStatus) {\n                    this.addChecks(addedValues_1);\n                }\n                else if (this.checkAllSearchRegister.size > 0) {\n                    this.checkAllSearchRegister.forEach(function (searchValue) { return _this.addChecks(_this.applyFilters(addedValues_1, searchValue)); });\n                }\n            }\n            if (this.texts) {\n                this.updateTitle();\n            }\n            this.fireModelChange();\n        }\n        if (changes['settings']) {\n            this.settings = Object.assign({}, this.defaultSettings, this.settings);\n        }\n        if (changes['texts']) {\n            this.texts = Object.assign({}, this.defaultTexts, this.texts);\n            if (!changes['texts'].isFirstChange()) {\n                this.updateTitle();\n            }\n        }\n    };\n    MultiselectDropdownComponent.prototype.ngOnDestroy = function () {\n        this.destroyed$.next();\n    };\n    MultiselectDropdownComponent.prototype.updateRenderItems = function () {\n        this.renderItems =\n            !this.searchLimitApplied ||\n                this.filterControl.value.length >= this.searchRenderAfter;\n        this.filteredOptions = this.applyFilters(this.options, this.settings.isLazyLoad ? '' : this.filterControl.value);\n        this.renderFilteredOptions = this.renderItems ? this.filteredOptions : [];\n        this.focusedItem = undefined;\n    };\n    MultiselectDropdownComponent.prototype.applyFilters = function (options, value) {\n        return this.searchFilter.transform(options, value, this.settings.searchMaxLimit, this.settings.searchMaxRenderedItems);\n    };\n    MultiselectDropdownComponent.prototype.fireModelChange = function () {\n        if (this.model != this.prevModel) {\n            this.prevModel = this.model;\n            this.onModelChange(this.model);\n            this.onModelTouched();\n            this.cdRef.markForCheck();\n        }\n    };\n    MultiselectDropdownComponent.prototype.writeValue = function (value) {\n        if (value !== undefined && value !== null) {\n            this.model = Array.isArray(value) ? value : [value];\n            this.ngDoCheck();\n        }\n        else {\n            this.model = [];\n        }\n    };\n    MultiselectDropdownComponent.prototype.registerOnChange = function (fn) {\n        this.onModelChange = fn;\n    };\n    MultiselectDropdownComponent.prototype.registerOnTouched = function (fn) {\n        this.onModelTouched = fn;\n    };\n    MultiselectDropdownComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    MultiselectDropdownComponent.prototype.ngDoCheck = function () {\n        var changes = this.differ.diff(this.model);\n        if (changes) {\n            this.updateNumSelected();\n            this.updateTitle();\n        }\n    };\n    MultiselectDropdownComponent.prototype.validate = function (_c) {\n        var _this = this;\n        if (this.model && this.model.length) {\n            return {\n                required: {\n                    valid: false\n                }\n            };\n        }\n        if (this.options.filter(function (o) { return _this.model.indexOf(o.id) && !o.disabled; }).length === 0) {\n            return {\n                selection: {\n                    valid: false\n                }\n            };\n        }\n        return null;\n    };\n    MultiselectDropdownComponent.prototype.registerOnValidatorChange = function (_fn) {\n        throw new Error('Method not implemented.');\n    };\n    MultiselectDropdownComponent.prototype.clearSearch = function (event) {\n        this.maybeStopPropagation(event);\n        this.filterControl.setValue('');\n    };\n    MultiselectDropdownComponent.prototype.toggleDropdown = function (e) {\n        this.maybeStopPropagation(e);\n        if (this.isVisible) {\n            this._focusBack = true;\n        }\n        this.isVisible = !this.isVisible;\n        this.isVisible ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n        this.focusedItem = undefined;\n    };\n    MultiselectDropdownComponent.prototype.closeDropdown = function (e) {\n        this.isVisible = true;\n        this.toggleDropdown(e);\n    };\n    MultiselectDropdownComponent.prototype.isSelected = function (option) {\n        return this.model && this.model.indexOf(option.id) > -1;\n    };\n    MultiselectDropdownComponent.prototype.setSelected = function (_event, option) {\n        var _this = this;\n        if (option.isLabel) {\n            return;\n        }\n        if (option.disabled) {\n            return;\n        }\n        if (this.disabledSelection) {\n            return;\n        }\n        setTimeout(function () {\n            _this.maybeStopPropagation(_event);\n            _this.maybePreventDefault(_event);\n            var index = _this.model.indexOf(option.id);\n            var isAtSelectionLimit = _this.settings.selectionLimit > 0 &&\n                _this.model.length >= _this.settings.selectionLimit;\n            var removeItem = function (idx, id) {\n                _this.model.splice(idx, 1);\n                _this.onRemoved.emit(id);\n                if (_this.settings.isLazyLoad &&\n                    _this.lazyLoadOptions.some(function (val) { return val.id === id; })) {\n                    _this.lazyLoadOptions.splice(_this.lazyLoadOptions.indexOf(_this.lazyLoadOptions.find(function (val) { return val.id === id; })), 1);\n                }\n            };\n            if (index > -1) {\n                if (_this.settings.minSelectionLimit === undefined ||\n                    _this.numSelected > _this.settings.minSelectionLimit) {\n                    removeItem(index, option.id);\n                }\n                var parentIndex = option.parentId && _this.model.indexOf(option.parentId);\n                if (parentIndex > -1) {\n                    removeItem(parentIndex, option.parentId);\n                }\n                else if (_this.parents.indexOf(option.id) > -1) {\n                    _this.options\n                        .filter(function (child) { return _this.model.indexOf(child.id) > -1 &&\n                        child.parentId === option.id; })\n                        .forEach(function (child) { return removeItem(_this.model.indexOf(child.id), child.id); });\n                }\n            }\n            else if (isAtSelectionLimit && !_this.settings.autoUnselect) {\n                _this.selectionLimitReached.emit(_this.model.length);\n                return;\n            }\n            else {\n                var addItem_1 = function (id) {\n                    _this.model.push(id);\n                    _this.onAdded.emit(id);\n                    if (_this.settings.isLazyLoad &&\n                        !_this.lazyLoadOptions.some(function (val) { return val.id === id; })) {\n                        _this.lazyLoadOptions.push(option);\n                    }\n                };\n                addItem_1(option.id);\n                if (!isAtSelectionLimit) {\n                    if (option.parentId && !_this.settings.ignoreLabels) {\n                        var children = _this.options.filter(function (child) { return child.id !== option.id && child.parentId === option.parentId; });\n                        if (children.every(function (child) { return _this.model.indexOf(child.id) > -1; })) {\n                            addItem_1(option.parentId);\n                        }\n                    }\n                    else if (_this.parents.indexOf(option.id) > -1) {\n                        var children = _this.options.filter(function (child) { return _this.model.indexOf(child.id) < 0 && child.parentId === option.id; });\n                        children.forEach(function (child) { return addItem_1(child.id); });\n                    }\n                }\n                else {\n                    removeItem(0, _this.model[0]);\n                }\n            }\n            if (_this.settings.closeOnSelect) {\n                _this.toggleDropdown();\n            }\n            _this.model = _this.model.slice();\n            _this.fireModelChange();\n        }, 0);\n    };\n    MultiselectDropdownComponent.prototype.updateNumSelected = function () {\n        var _this = this;\n        this.numSelected =\n            this.model.filter(function (id) { return _this.parents.indexOf(id) < 0; }).length || 0;\n    };\n    MultiselectDropdownComponent.prototype.updateTitle = function () {\n        var _this = this;\n        var numSelectedOptions = this.options.length;\n        if (this.settings.ignoreLabels) {\n            numSelectedOptions = this.options.filter(function (option) { return !option.isLabel; }).length;\n        }\n        if (this.numSelected === 0 || this.settings.fixedTitle) {\n            this.title = this.texts ? this.texts.defaultTitle : '';\n        }\n        else if (this.settings.displayAllSelectedText &&\n            this.model.length === numSelectedOptions) {\n            this.title = this.texts ? this.texts.allSelected : '';\n        }\n        else if (this.settings.dynamicTitleMaxItems &&\n            this.settings.dynamicTitleMaxItems >= this.numSelected) {\n            var useOptions_1 = this.settings.isLazyLoad && this.lazyLoadOptions.length\n                ? this.lazyLoadOptions\n                : this.options;\n            var titleSelections = void 0;\n            if (this.settings.maintainSelectionOrderInTitle) {\n                var optionIds_1 = useOptions_1.map(function (selectOption, idx) { return selectOption.id; });\n                titleSelections = this.model\n                    .map(function (selectedId) { return optionIds_1.indexOf(selectedId); })\n                    .filter(function (optionIndex) { return optionIndex > -1; })\n                    .map(function (optionIndex) { return useOptions_1[optionIndex]; });\n            }\n            else {\n                titleSelections = useOptions_1.filter(function (option) { return _this.model.indexOf(option.id) > -1; });\n            }\n            this.title = titleSelections.map(function (option) { return option.name; }).join(', ');\n        }\n        else {\n            this.title =\n                this.numSelected +\n                    ' ' +\n                    (this.numSelected === 1\n                        ? this.texts.checked\n                        : this.texts.checkedPlural);\n        }\n        this.cdRef.markForCheck();\n    };\n    MultiselectDropdownComponent.prototype.searchFilterApplied = function () {\n        return (this.settings.enableSearch &&\n            this.filterControl.value &&\n            this.filterControl.value.length > 0);\n    };\n    MultiselectDropdownComponent.prototype.addChecks = function (options) {\n        var _this = this;\n        var checkedOptions = options\n            .filter(function (option) {\n            if (!option.disabled &&\n                (_this.model.indexOf(option.id) === -1 &&\n                    !(_this.settings.ignoreLabels && option.isLabel))) {\n                _this.onAdded.emit(option.id);\n                return true;\n            }\n            return false;\n        })\n            .map(function (option) { return option.id; });\n        this.model = this.model.concat(checkedOptions);\n    };\n    MultiselectDropdownComponent.prototype.checkAll = function () {\n        if (!this.disabledSelection) {\n            this.addChecks(!this.searchFilterApplied() ? this.options : this.filteredOptions);\n            if (this.settings.isLazyLoad && this.settings.selectAddedValues) {\n                if (this.searchFilterApplied() && !this.checkAllStatus) {\n                    this.checkAllSearchRegister.add(this.filterControl.value);\n                }\n                else {\n                    this.checkAllSearchRegister.clear();\n                    this.checkAllStatus = true;\n                }\n                this.load();\n            }\n            this.fireModelChange();\n        }\n    };\n    MultiselectDropdownComponent.prototype.uncheckAll = function () {\n        var _this = this;\n        if (!this.disabledSelection) {\n            var checkedOptions = this.model;\n            var unCheckedOptions_1 = !this.searchFilterApplied()\n                ? this.model\n                : this.filteredOptions.map(function (option) { return option.id; });\n            unCheckedOptions_1 = checkedOptions.filter(function (item) { return unCheckedOptions_1.indexOf(item) > -1; });\n            this.model = this.model.filter(function (id) {\n                if ((unCheckedOptions_1.indexOf(id) < 0 &&\n                    _this.settings.minSelectionLimit === undefined) ||\n                    unCheckedOptions_1.indexOf(id) < _this.settings.minSelectionLimit) {\n                    return true;\n                }\n                else {\n                    _this.onRemoved.emit(id);\n                    return false;\n                }\n            });\n            if (this.settings.isLazyLoad && this.settings.selectAddedValues) {\n                if (this.searchFilterApplied()) {\n                    if (this.checkAllSearchRegister.has(this.filterControl.value)) {\n                        this.checkAllSearchRegister.delete(this.filterControl.value);\n                        this.checkAllSearchRegister.forEach(function (searchTerm) {\n                            var filterOptions = this.applyFilters(this.options.filter(function (option) { return unCheckedOptions_1.indexOf(option.id) > -1; }), searchTerm);\n                            this.addChecks(filterOptions);\n                        });\n                    }\n                }\n                else {\n                    this.checkAllSearchRegister.clear();\n                    this.checkAllStatus = false;\n                }\n                this.load();\n            }\n            this.fireModelChange();\n        }\n    };\n    MultiselectDropdownComponent.prototype.preventCheckboxCheck = function (event, option) {\n        if (option.disabled ||\n            (this.settings.selectionLimit &&\n                !this.settings.autoUnselect &&\n                this.model.length >= this.settings.selectionLimit &&\n                this.model.indexOf(option.id) === -1 &&\n                this.maybePreventDefault(event))) {\n            this.maybePreventDefault(event);\n        }\n    };\n    MultiselectDropdownComponent.prototype.isCheckboxDisabled = function (option) {\n        return this.disabledSelection || option && option.disabled;\n    };\n    MultiselectDropdownComponent.prototype.checkScrollPosition = function (ev) {\n        var scrollTop = ev.target.scrollTop;\n        var scrollHeight = ev.target.scrollHeight;\n        var scrollElementHeight = ev.target.clientHeight;\n        var roundingPixel = 1;\n        var gutterPixel = 1;\n        if (scrollTop >=\n            scrollHeight -\n                (1 + this.settings.loadViewDistance) * scrollElementHeight -\n                roundingPixel -\n                gutterPixel) {\n            this.load();\n        }\n    };\n    MultiselectDropdownComponent.prototype.checkScrollPropagation = function (ev, element) {\n        var scrollTop = element.scrollTop;\n        var scrollHeight = element.scrollHeight;\n        var scrollElementHeight = element.clientHeight;\n        if ((ev.deltaY > 0 && scrollTop + scrollElementHeight >= scrollHeight) ||\n            (ev.deltaY < 0 && scrollTop <= 0)) {\n            ev = ev || window.event;\n            this.maybePreventDefault(ev);\n            ev.returnValue = false;\n        }\n    };\n    MultiselectDropdownComponent.prototype.trackById = function (idx, selectOption) {\n        return selectOption.id;\n    };\n    MultiselectDropdownComponent.prototype.load = function () {\n        this.onLazyLoad.emit({\n            length: this.options.length,\n            filter: this.filterControl.value,\n            checkAllSearches: this.checkAllSearchRegister,\n            checkAllStatus: this.checkAllStatus,\n        });\n    };\n    MultiselectDropdownComponent.prototype.focusItem = function (dir, e) {\n        if (!this.isVisible) {\n            return;\n        }\n        this.maybePreventDefault(e);\n        var idx = this.filteredOptions.indexOf(this.focusedItem);\n        if (idx === -1) {\n            this.focusedItem = this.filteredOptions[0];\n            return;\n        }\n        var nextIdx = idx + dir;\n        var newIdx = nextIdx < 0\n            ? this.filteredOptions.length - 1\n            : nextIdx % this.filteredOptions.length;\n        this.focusedItem = this.filteredOptions[newIdx];\n    };\n    MultiselectDropdownComponent.prototype.maybePreventDefault = function (e) {\n        if (e && e.preventDefault) {\n            e.preventDefault();\n        }\n    };\n    MultiselectDropdownComponent.prototype.maybeStopPropagation = function (e) {\n        if (e && e.stopPropagation) {\n            e.stopPropagation();\n        }\n    };\n    return MultiselectDropdownComponent;\n}());\nMultiselectDropdownComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ss-multiselect-dropdown',\n                template: \"<div class=\\\"dropdown\\\" [ngClass]=\\\"settings.containerClasses\\\" [class.open]=\\\"isVisible\\\">\\n  <button type=\\\"button\\\" class=\\\"dropdown-toggle\\\" [ngClass]=\\\"settings.buttonClasses\\\" (click)=\\\"toggleDropdown($event)\\\" [disabled]=\\\"disabled\\\"\\n    [ssAutofocus]=\\\"!focusBack\\\">\\n    {{ title }}\\n    <span class=\\\"caret\\\"></span>\\n  </button>\\n  <div #scroller *ngIf=\\\"isVisible\\\" class=\\\"dropdown-menu\\\" [ngClass]=\\\"{'chunkydropdown-menu': settings.checkedStyle == 'visual' }\\\"\\n    (scroll)=\\\"settings.isLazyLoad ? checkScrollPosition($event) : null\\\" (wheel)=\\\"settings.stopScrollPropagation ? checkScrollPropagation($event, scroller) : null\\\"\\n    [class.pull-right]=\\\"settings.pullRight\\\" [class.dropdown-menu-right]=\\\"settings.pullRight\\\" [style.max-height]=\\\"settings.maxHeight\\\"\\n    style=\\\"display: block; height: auto; overflow-y: auto;\\\" (keydown.tab)=\\\"focusItem(1, $event)\\\" (keydown.shift.tab)=\\\"focusItem(-1, $event)\\\">\\n    <div class=\\\"input-group search-container\\\" *ngIf=\\\"settings.enableSearch\\\">\\n      <div class=\\\"input-group-prepend\\\">\\n        <span class=\\\"input-group-text\\\" id=\\\"basic-addon1\\\">\\n          <i class=\\\"fa fa-search\\\" aria-hidden=\\\"true\\\"></i>\\n        </span>\\n      </div>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" ssAutofocus [formControl]=\\\"filterControl\\\" [placeholder]=\\\"texts.searchPlaceholder\\\"\\n        class=\\\"form-control\\\">\\n      <div class=\\\"input-group-append\\\" *ngIf=\\\"filterControl.value.length>0\\\">\\n        <button class=\\\"btn btn-default btn-secondary\\\" type=\\\"button\\\" (click)=\\\"clearSearch($event)\\\">\\n          <i class=\\\"fa fa-times\\\"></i>\\n        </button>\\n      </div>\\n    </div>\\n    <a role=\\\"menuitem\\\" href=\\\"javascript:;\\\" tabindex=\\\"-1\\\" class=\\\"dropdown-item check-control check-control-check\\\" *ngIf=\\\"settings.showCheckAll && !disabledSelection\\\"\\n      (click)=\\\"checkAll()\\\">\\n      <span style=\\\"width: 16px;\\\"><span [ngClass]=\\\"{'glyphicon glyphicon-ok': settings.checkedStyle !== 'fontawesome','fa fa-check': settings.checkedStyle === 'fontawesome'}\\\"></span></span>\\n      {{ texts.checkAll }}\\n    </a>\\n    <a role=\\\"menuitem\\\" href=\\\"javascript:;\\\" tabindex=\\\"-1\\\" class=\\\"dropdown-item check-control check-control-uncheck\\\" *ngIf=\\\"settings.showUncheckAll && !disabledSelection\\\"\\n      (click)=\\\"uncheckAll()\\\">\\n      <span style=\\\"width: 16px;\\\"><span [ngClass]=\\\"{'glyphicon glyphicon-remove': settings.checkedStyle !== 'fontawesome','fa fa-times': settings.checkedStyle === 'fontawesome'}\\\"></span></span>\\n      {{ texts.uncheckAll }}\\n    </a>\\n    <a *ngIf=\\\"settings.showCheckAll || settings.showUncheckAll\\\" href=\\\"javascript:;\\\" class=\\\"dropdown-divider divider\\\"></a>\\n    <a *ngIf=\\\"!renderItems\\\" href=\\\"javascript:;\\\" class=\\\"dropdown-item empty\\\">{{ texts.searchNoRenderText }}</a>\\n    <a *ngIf=\\\"renderItems && !renderFilteredOptions.length\\\" href=\\\"javascript:;\\\" class=\\\"dropdown-item empty\\\">{{ texts.searchEmptyResult }}</a>\\n    <a class=\\\"dropdown-item\\\" href=\\\"javascript:;\\\" *ngFor=\\\"let option of renderFilteredOptions; trackBy: trackById\\\" [class.active]=\\\"isSelected(option)\\\"\\n      [ngStyle]=\\\"getItemStyle(option)\\\" [ngClass]=\\\"option.classes\\\" [class.dropdown-header]=\\\"option.isLabel\\\" [ssAutofocus]=\\\"option !== focusedItem\\\"\\n      tabindex=\\\"-1\\\" (click)=\\\"setSelected($event, option)\\\" (keydown.space)=\\\"setSelected($event, option)\\\" (keydown.enter)=\\\"setSelected($event, option)\\\">\\n      <span *ngIf=\\\"!option.isLabel; else label\\\" role=\\\"menuitem\\\" tabindex=\\\"-1\\\" [style.padding-left]=\\\"this.parents.length>0&&this.parents.indexOf(option.id)<0&&'30px'\\\"\\n        [ngStyle]=\\\"getItemStyleSelectionDisabled()\\\">\\n        <ng-container [ngSwitch]=\\\"settings.checkedStyle\\\">\\n          <input *ngSwitchCase=\\\"'checkboxes'\\\" type=\\\"checkbox\\\" [checked]=\\\"isSelected(option)\\\" (click)=\\\"preventCheckboxCheck($event, option)\\\"\\n            [disabled]=\\\"isCheckboxDisabled(option)\\\" [ngStyle]=\\\"getItemStyleSelectionDisabled()\\\" />\\n          <span *ngSwitchCase=\\\"'glyphicon'\\\" style=\\\"width: 16px;\\\" class=\\\"glyphicon\\\" [class.glyphicon-ok]=\\\"isSelected(option)\\\" [class.glyphicon-lock]=\\\"isCheckboxDisabled(option)\\\"></span>\\n          <span *ngSwitchCase=\\\"'fontawesome'\\\" style=\\\"width: 16px;display: inline-block;\\\">\\n            <span *ngIf=\\\"isSelected(option)\\\"><i class=\\\"fa fa-check\\\" aria-hidden=\\\"true\\\"></i></span>\\n            <span *ngIf=\\\"isCheckboxDisabled(option)\\\"><i class=\\\"fa fa-lock\\\" aria-hidden=\\\"true\\\"></i></span>\\n          </span>\\n          <span *ngSwitchCase=\\\"'visual'\\\" style=\\\"display:block;float:left; border-radius: 0.2em; border: 0.1em solid rgba(44, 44, 44, 0.63);background:rgba(0, 0, 0, 0.1);width: 5.5em;\\\">\\n            <div class=\\\"slider\\\" [ngClass]=\\\"{'slideron': isSelected(option)}\\\">\\n              <img *ngIf=\\\"option.image != null\\\" [src]=\\\"option.image\\\" style=\\\"height: 100%; width: 100%; object-fit: contain\\\" />\\n              <div *ngIf=\\\"option.image == null\\\" style=\\\"height: 100%; width: 100%;text-align: center; display: table; background-color:rgba(0, 0, 0, 0.74)\\\">\\n                <div class=\\\"content_wrapper\\\">\\n                  <span style=\\\"font-size:3em;color:white\\\" class=\\\"glyphicon glyphicon-eye-close\\\"></span>\\n                </div>\\n              </div>\\n            </div>\\n          </span>\\n        </ng-container>\\n        <span [ngClass]=\\\"{'chunkyrow': settings.checkedStyle == 'visual' }\\\" [class.disabled]=\\\"isCheckboxDisabled(option)\\\" [ngClass]=\\\"settings.itemClasses\\\"\\n          [style.font-weight]=\\\"this.parents.indexOf(option.id)>=0?'bold':'normal'\\\">\\n          {{ option.name }}\\n        </span>\\n      </span>\\n      <ng-template #label>\\n        <span [class.disabled]=\\\"isCheckboxDisabled(option)\\\">{{ option.name }}</span>\\n      </ng-template>\\n    </a>\\n  </div>\\n</div>\\n\",\n                styles: [\"a{outline:0!important}.dropdown-inline{display:inline-block}.dropdown-toggle .caret{margin-left:4px;white-space:nowrap;display:inline-block}.chunkydropdown-menu{min-width:20em}.chunkyrow{line-height:2;margin-left:1em;font-size:2em}.slider{width:3.8em;height:3.8em;display:block;-webkit-transition:all 125ms linear;transition:all 125ms linear;margin-left:.125em;margin-top:auto}.slideron{margin-left:1.35em}.content_wrapper{display:table-cell;vertical-align:middle}.search-container{padding:0 5px 5px}\"],\n                providers: [MULTISELECT_VALUE_ACCESSOR, MultiSelectSearchFilter],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\nMultiselectDropdownComponent.ctorParameters = function () { return [\n    { type: ElementRef, },\n    { type: FormBuilder, },\n    { type: MultiSelectSearchFilter, },\n    { type: IterableDiffers, },\n    { type: ChangeDetectorRef, },\n]; };\nMultiselectDropdownComponent.propDecorators = {\n    \"options\": [{ type: Input },],\n    \"settings\": [{ type: Input },],\n    \"texts\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n    \"disabledSelection\": [{ type: Input },],\n    \"selectionLimitReached\": [{ type: Output },],\n    \"dropdownClosed\": [{ type: Output },],\n    \"dropdownOpened\": [{ type: Output },],\n    \"onAdded\": [{ type: Output },],\n    \"onRemoved\": [{ type: Output },],\n    \"onLazyLoad\": [{ type: Output },],\n    \"onFilter\": [{ type: Output },],\n    \"onClick\": [{ type: HostListener, args: ['document: click', ['$event.target'],] }, { type: HostListener, args: ['document: touchstart', ['$event.target'],] },],\n};\nvar MultiselectDropdownModule = /** @class */ (function () {\n    function MultiselectDropdownModule() {\n    }\n    return MultiselectDropdownModule;\n}());\nMultiselectDropdownModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ReactiveFormsModule],\n                exports: [\n                    MultiselectDropdownComponent,\n                    MultiSelectSearchFilter,\n                ],\n                declarations: [\n                    MultiselectDropdownComponent,\n                    MultiSelectSearchFilter,\n                    AutofocusDirective,\n                ],\n            },] },\n];\n\nexport { MultiSelectSearchFilter, MultiselectDropdownModule, MultiselectDropdownComponent, AutofocusDirective as ɵa };\n//# sourceMappingURL=angular-2-dropdown-multiselect.js.map\n"],"sourceRoot":""}